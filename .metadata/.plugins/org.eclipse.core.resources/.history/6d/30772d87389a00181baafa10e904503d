package com.userCenter.productCenter;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.NumberUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.bean.BoxImg;
import com.bean.Product;
import com.bean.User;
import com.bean.Product.CATEGORY;
import com.buffer.imgbuffer.BoxImgBuffer;
import com.dao.Dao;
import com.dao.imgDao.BoxImgDao;
import com.dao.productDao.ProductDao;
import com.dao.userDao.UserDao;
import com.dao.uuid.UuidUtils;

@Controller
public class AddProduct {
	
	String         basePath = null;
	
	@Autowired
	@Qualifier("productValidator")
	private Validator validator;
	
	@InitBinder
	public void initBinder(WebDataBinder binder) {}
	
	@RequestMapping(value="/userCenter/addProduct",method=RequestMethod.GET )
	public ModelAndView adduser( HttpServletRequest  request  , 
			                     HttpSession         session  ,
			                     Model               model    ) throws IOException {
		
		
		/* identify username */
		Boolean nameident = new Boolean(false);
		
		Enumeration<String> attrnames = session.getAttributeNames();
		
		while(  attrnames.hasMoreElements() ) {
			String name = (String)attrnames.nextElement();
			if(name.equals("username")) {
				String username = (String)session.getAttribute("username");
				// &&(name!=null)&&(name!="null")) 
				nameident = true;
			}
		}
		
		if( nameident == false) 
			return new ModelAndView( "admin/logindefault" );	
		
		
		
		
		
		basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+request.getContextPath();
		
		// 1.load file from URL.
        URL           urlInput = new URL(basePath+"/img/default/userCenter/productCenter/280_280.jpg");
        BufferedImage urlImage = ImageIO.read(urlInput);
        
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        ImageIO.write( urlImage, "jpg", baos );
                                        baos.flush();
                                        baos.close();
                                        
        BoxImgBuffer  boximgbuffer = new BoxImgBuffer();
        
					  boximgbuffer.setBytes(baos.toByteArray());
					  boximgbuffer.setName(".jpg");
		
        session.setAttribute("boximgsmalldefault", boximgbuffer);
		
        addProductConfig(model);
        
		System.out.println( "After setting Default BoxImg Attribute..." + "\n" );
		
		return new ModelAndView( "/userCenter/productCenter/addProduct","command",new Product());
		
	}
	
	public void addProductConfig( Model       model ) {
        
		// 2.prepare Category List.
        
        List<String>  categoryList = new ArrayList();
				      
				      categoryList.add(CATEGORY.三C数码 .toString());
				      categoryList.add(CATEGORY.女装   .toString());
				      categoryList.add(CATEGORY.家电   .toString());
				      categoryList.add(CATEGORY.男装   .toString());
				      categoryList.add(CATEGORY.童装   .toString());
        
				      model.addAttribute( "categoryList" , categoryList );
				      
	}
	
	@ModelAttribute("product")
	public Product createUserLogModel() {
		return new Product();
	}
	
	public static int insertBoxImg(String username , Product product) {
		return 0;
	}
	
	public static void cleanimgbuffer(HttpSession session) {
		session.removeAttribute("");
	}
	
	
	@RequestMapping(value="/userCenter/addProduct",method=RequestMethod.POST)
	public String validator( @ModelAttribute( "product" )
						     @Validated      
						      Product          product ,
						      BindingResult    binder  ,
						      Model            model   ,
						      HttpSession      session ) throws IOException, InterruptedException {
		
		addProductConfig(model);
		
	    // 这行解决中文乱码
	    String       productname     = new String(product.getProductname().getBytes("ISO-8859-1"),"utf-8");
		         	 product.setProductname(productname);
		         	 
		String       productcategory = new String(product.getCategory().getBytes("ISO-8859-1"),"utf-8");
		         	 product.setCategory(productcategory);
		
		boolean ValidateResult = true;
		
		//StringUtils.isEmptyOrWhitespaceOnly(arg0)
		
		// 0.error user enter.
		
	      if ( binder.hasErrors() ) {
				return "/userCenter/productCenter/addProduct";
				
		  } else {
			  
			  System.out.println( "Pass username Validation...." );
			  
			  
			  model.addAttribute( "productname", productname );
			  
			  
			  // 1.productname length exceed
			  if (  ( product.getProductname().length() >= 60 )||(   product.getProductname().length() == 0   ) ) {
				  System.out.println( "Name" + product.getProductname() );
				  System.out.println( "Name  length exceed." );
				  model.addAttribute( "nameValidator" ,  "产品名称必须大于1，少于60个字符."   );
				  ValidateResult = false;
			  }
			  
			  
			  System.out.println( "product price --" + product.getPrice() + "--" );
			  // 2.price is not integer
			  if(product.getPrice().contains(".")){
				  
				  System.out.println( "---------------- price decimal dot more than one. ------------------" );
				  
				  String[] price = product.getPrice().split("\\.");
				  
				  System.out.println( "price.length -- " + price.length );
				  
				  // 2.1. price dot more than one.
				  if(price.length>2) {
					  System.out.println( "price" + product.getPrice   ()             );
					  System.out.println( "Price dots more than one. "                );
					  model.addAttribute( "priceValidator" ,  "产品价格小数点必须为1个或没有"   );
					  ValidateResult = false;
				  }
				  
				  if(price.length==2) {
					  if (!StringUtils.isNumeric(price[0])||!StringUtils.isNumeric(price[1])  ) {
						  System.out.println( "price" + product.getPrice   () );
						  System.out.println( "Price is not Integer " );
						  model.addAttribute( "priceValidator" ,  "产品价格必须为数字"   );
						  ValidateResult = false;
					  } else if ( price[0].length() > 10 ) {
						  System.out.println( "price" + product.getPrice   () );
						  System.out.println( "Price Integer bit must greater than 10. " );
						  model.addAttribute( "priceValidator" ,  "产品价格整数位必须小于等于10位"   );
						  ValidateResult = false;
					  }	else if ( price[1].length() > 2  ) {
						  System.out.println( "price" + product.getPrice   () );
						  System.out.println( "Price decimal bit must less than 2. " );
						  model.addAttribute( "priceValidator" ,  "产品价格小数位必须小于等于2位"   );
						  ValidateResult = false;
					  }
				  }
				  
				  
			  } else {
				  if (!StringUtils.isNumeric(product.getPrice   ())) {
					  System.out.println( "price" + product.getPrice   () );
					  System.out.println( "Price is not Integer " );
					  model.addAttribute( "priceValidator" ,  "产品价格必须为数字"   );
					  ValidateResult = false;
				  } else if (product.getPrice().length()>=10) {
					  System.out.println( "Price length exceed." );
					  model.addAttribute( "priceValidator" ,  "产品价格(包含小数)必须少于12位"   );
					  ValidateResult = false;
				  }
			  }
			  
			  
			  
			  // 3.quantity is not integer
			  if (!StringUtils.isNumeric(product.getQuantity())  ) {
				  System.out.println( "quantity" + product.getQuantity() );
			      System.out.println( "Quantity is not Integer.");
				  model.addAttribute( "quantityValidator" ,  "产品数量必须为数字"   );
				  ValidateResult = false;
			  } else if (product.getQuantity().length()>=10) {
				  System.out.println( "Quantity length exceed." );
				  model.addAttribute( "priceValidator"    ,  "产品数量必须少于10位"   );
				  ValidateResult = false;
			  }
			  
			  
			  // 5.if category is not valid.
			  if( product.getCategory().equals("") ) {
				  model.addAttribute( "categoryValidator" ,  "请选择品类"   );
				  ValidateResult = false;
			  }
			  
			  
			  // 5.if data to be entered is invalid.
			  if (!ValidateResult) {
			   		
				  return "/userCenter/productCenter/addProduct";
				    
			  } else {
			   		
			   		
					String      username    = (String)session.getAttribute("username"); 
						        product.setUsername(username);
								
					    		model.addAttribute( "username" ,  username   );
					    		model.addAttribute(  "title"   , "添加产品成功!" );
		    		
		    		BoxImgDao.init();
		    		
		    		// 将tomcat 的版本号去掉
		    		// 文件夹名称改为tomcat
		    		String        rootPath = new String("c:/tomcat/webapps/Spring/WEB-INF/img/users");
		    		
		    		// query uuid and convert into byte[16]
		    		byte[]  uuidbytes = null;
		    		
		    		//1.prepare data.
		    		for ( int i = 0 ; i < 6 ; i++ ) {
			    		
		    			System.out.println( "------------------------Row Insert "+i+" Begin------------------------" );
		    			

		    			BoxImgBuffer  BoxImg            = null;
		    			BoxImgBuffer  BoxImgSmall       = null;
		    			
						String       imgPath      = null;		
						String       imgsmallPath = null;	
		    			
		    			if(session.getAttribute("boximg"+i)!=null) {
			    			// 1.get boximg from session.
		    				System.out.println( "----boximg is not null----" );
			    			System.out.println( "1.get boximg from session." );
				    		BoxImg            = (BoxImgBuffer)session.getAttribute("boximg"     +i);
				    		BoxImgSmall       = (BoxImgBuffer)session.getAttribute("boximgsmall"+i);
		    			}
		    			
			    		// 3.create file.
			    		String        date     = new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime());
			    		String        time     = new SimpleDateFormat( "HHmmss" ).format(Calendar.getInstance().getTime());
		    			
			    		System.out.println( "2.get byte from BoxImgBuffer." );
			    		
			    		if(BoxImg!=null) {
			    			
				    		byte[]        boximgbytes       = BoxImg.getBytes();
				    		byte[]        boximgsmallbytes  = BoxImgSmall.getBytes();
				    		
				    		// 2.record into local ---- if boximg is not empty.
					    		
				    		System.out.println( "----BOX IMG "+i+" is not NULL----" );
				    		
				    		// 3.create current date and time folder.
							File         userfolder = new File  (rootPath+"/"+username+"/"+date+"/"+time);
							
							if ( !userfolder.exists() ) 
								  userfolder.mkdirs(); 
							
							// 4.create file.
							System.out.println( "3.1.Creating File..." );
							
							// 5.dependency test.
							String       NewBoxImgOriginalFileName      = BoxImg     .getOriginalFilename().replace(" ", "_");   
							String       NewBoxImgSmallOriginalFileName = BoxImgSmall.getOriginalFilename().replace(" ", "_");             
							
							File         userimgfile      = new File  (rootPath+"/"+username+"/"+date+"/"+time+"/"+i+NewBoxImgOriginalFileName      );
								  if(    userimgfile.exists        () ) 
						            	 userimgfile.delete();
						                 userimgfile.createNewFile ();
									     
							File         userimgsmallfile = new File  (rootPath+"/"+username+"/"+date+"/"+time+"/"+i+NewBoxImgSmallOriginalFileName );
								  if(    userimgsmallfile.exists        () ) 
									     userimgsmallfile.delete();
						                 userimgsmallfile.createNewFile ();
										 
							FileOutputStream fous      = new FileOutputStream(userimgfile);
							                 fous.write(boximgbytes);
							                 fous.close();
							                 
							FileOutputStream fsmallous = new FileOutputStream(userimgsmallfile);
											 fsmallous.write(boximgsmallbytes);             
											 fsmallous.close();
					    	
											 
							System.out.println( "----BOX IMG Name "+i+" is not NULL----" );
							imgPath      = new String("/img/users/"+username+"/"+date+"/"+time+"/"+i+NewBoxImgOriginalFileName      ); 
							imgsmallPath = new String("/img/users/"+username+"/"+date+"/"+time+"/"+i+NewBoxImgSmallOriginalFileName ); 
			    		
			    		} else {
			    			System.out.println( "----BoxImg "+i+"is NULL..." );
			    		}
			    		
			    		
			    		
						// 1.generate new product id by random and insert into row.
						if ( i == 0 ) {
							
						    UUID   uuid        = UUID.randomUUID();
						    	   uuidbytes   = UuidUtils.asBytes(uuid);
						    	   
						    String randomUUIDString = uuid.toString();
						    System.out.println( "3.2.Generate new uuid -- " + randomUUIDString );
						    String productid   = randomUUIDString;//ProductDao.queryNewId(username);
						    
						    
						    /****SMALL BOX IMG ADJUSTMENT****/
						    // set boximg small as main photo.
					               product.setFirstboximg(imgsmallPath);

					        String productPage = (String)session.getAttribute("productPageURL");
					        
					        System.out.println( "4.1.Generate new productPage Folder And File ..." );
					        System.out.println( "4.1.Generating productPage Folder..." );	
						    File   folder      =  new    File("c:/tomcat/webapps/Spring/WEB-INF/data/productPage/"+username+"/"+randomUUIDString);
						    if(!folder.exists())
							   folder.mkdirs();
						    
						    System.out.println( "4.3.Generating productPage File..." );	
						    File   file        =  new    File("c:/tomcat/webapps/Spring/WEB-INF/data/productPage/"+username+"/"+randomUUIDString+"/"+"productPage.dat");
						    if(!file.exists())
							   file.createNewFile();
						    else {
							   file.delete();
							   file.createNewFile();
						    }
						    
						    System.out.println( "5.1.Storing productPage File..." );		
						    FileOutputStream productPageFous = new FileOutputStream(file);
						    	if( (!productPage.equals(null))||(productPage.getBytes().length!=0) ) {
						    		 System.out.println( "5.2.productPage File Size -- " + productPage.getBytes().length );	
						   					 productPageFous.write(productPage.getBytes());
						    	} else System.out.println( "5.2.productPage File is Empty... "  );	
						   					 productPageFous.close();
						    
						    System.out.println( "Setting ProductID ..." );					
						    product.setProductid(uuidbytes);
					        product.setProductpage("/data/productPage/"+username+"/"+randomUUIDString+"/"+"productPage.dat");
					        
					        System.out.println( "Initing ProductDao ..." );
					        ProductDao.init();
					        
					        System.out.println( "--------Category--------" + product.getCategory() + "----------------" );
							
				    		System.out.println( "ProductDao rows to be insert -- " + ProductDao.insertAll(product) );
				    		
						}
				    	
						
			    		System.out.println( "productID byte to be insert -- " + uuidbytes.length );
			    		/** IMG Insert part. **/
			    		
			    		System.out.println( "inserting BoxImg ... " );
			    		BoxImg  boximgbean = new BoxImg( uuidbytes , String.valueOf(i) , imgPath , imgsmallPath );
			    		
			    		int     rows       = BoxImgDao.insertRow(boximgbean);
			    		System.out.println( "rows to be inserted -- " + rows );
			    		
			    		
			    		// remove pic from boximg.
			    		
			    		session.removeAttribute("boximg"     +String.valueOf(i));
			    		session.removeAttribute("boximgsmall"+String.valueOf(i));
			    		
			    		// remove data from productPageViewer.
			    		session.removeAttribute("productPageURL");
		    		}
		    		
		    		Thread.sleep(500);
		    		
		    		System.out.println( "Pass all Valiations..." + "\n" );
		    		return "/userCenter/productCenter/success" ;
		    		
			    } 
			   	
		  }
	      
	 }
	 
}




